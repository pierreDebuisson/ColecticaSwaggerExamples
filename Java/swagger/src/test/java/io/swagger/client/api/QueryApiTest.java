/*
 * Colectica Repository REST API
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AdjacencyMatrix;
import io.swagger.client.model.GetRelationshipsRequest;
import io.swagger.client.model.GetTypedRelationshipsRequest;
import io.swagger.client.model.GraphSearchRequest;
import io.swagger.client.model.RepositoryItemMetadata;
import io.swagger.client.model.SearchRequest;
import io.swagger.client.model.SearchResponse;
import io.swagger.client.model.SearchTypedSetRequest;
import io.swagger.client.model.TypedAdjacencyMatrix;
import io.swagger.client.model.TypedIdTriple;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryApi
 */
@Ignore
public class QueryApiTest {

    private final QueryApi api = new QueryApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryPostTest() throws ApiException {
        SearchRequest request = null;
        SearchResponse response = api.apiV1QueryPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryRelationshipByobjectDescriptionsPostTest() throws ApiException {
        GraphSearchRequest request = null;
        List<RepositoryItemMetadata> response = api.apiV1QueryRelationshipByobjectDescriptionsPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryRelationshipByobjectPostTest() throws ApiException {
        GraphSearchRequest request = null;
        List<TypedIdTriple> response = api.apiV1QueryRelationshipByobjectPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryRelationshipBysubjectDescriptionsPostTest() throws ApiException {
        GraphSearchRequest request = null;
        List<RepositoryItemMetadata> response = api.apiV1QueryRelationshipBysubjectDescriptionsPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryRelationshipBysubjectPostTest() throws ApiException {
        GraphSearchRequest request = null;
        List<TypedIdTriple> response = api.apiV1QueryRelationshipBysubjectPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryRelationshipMatrixPostTest() throws ApiException {
        GetRelationshipsRequest request = null;
        AdjacencyMatrix response = api.apiV1QueryRelationshipMatrixPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QueryRelationshipMatrixTypedPostTest() throws ApiException {
        GetTypedRelationshipsRequest request = null;
        TypedAdjacencyMatrix response = api.apiV1QueryRelationshipMatrixTypedPost(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1QuerySetPostTest() throws ApiException {
        SearchTypedSetRequest request = null;
        List<TypedIdTriple> response = api.apiV1QuerySetPost(request);

        // TODO: test validations
    }
    
}
