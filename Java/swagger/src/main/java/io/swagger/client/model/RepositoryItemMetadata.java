/*
 * Colectica Repository REST API
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.joda.time.DateTime;

/**
 * RepositoryItemMetadata
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-17T15:59:17.406-05:00")
public class RepositoryItemMetadata {
  @SerializedName("VersionRationale")
  private Map<String, String> versionRationale = null;

  @SerializedName("Summary")
  private Map<String, String> summary = null;

  @SerializedName("ItemName")
  private Map<String, String> itemName = null;

  @SerializedName("Label")
  private Map<String, String> label = null;

  @SerializedName("Description")
  private Map<String, String> description = null;

  @SerializedName("ItemType")
  private UUID itemType = null;

  @SerializedName("AgencyId")
  private String agencyId = null;

  @SerializedName("Version")
  private Long version = null;

  @SerializedName("Identifier")
  private UUID identifier = null;

  @SerializedName("VersionDate")
  private DateTime versionDate = null;

  @SerializedName("VersionResponsibility")
  private String versionResponsibility = null;

  @SerializedName("IsPublished")
  private Boolean isPublished = null;

  @SerializedName("IsDeprecated")
  private Boolean isDeprecated = null;

  @SerializedName("Tags")
  private List<String> tags = null;

  public RepositoryItemMetadata versionRationale(Map<String, String> versionRationale) {
    this.versionRationale = versionRationale;
    return this;
  }

  public RepositoryItemMetadata putVersionRationaleItem(String key, String versionRationaleItem) {
    if (this.versionRationale == null) {
      this.versionRationale = new HashMap<String, String>();
    }
    this.versionRationale.put(key, versionRationaleItem);
    return this;
  }

   /**
   * Get versionRationale
   * @return versionRationale
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getVersionRationale() {
    return versionRationale;
  }

  public void setVersionRationale(Map<String, String> versionRationale) {
    this.versionRationale = versionRationale;
  }

  public RepositoryItemMetadata summary(Map<String, String> summary) {
    this.summary = summary;
    return this;
  }

  public RepositoryItemMetadata putSummaryItem(String key, String summaryItem) {
    if (this.summary == null) {
      this.summary = new HashMap<String, String>();
    }
    this.summary.put(key, summaryItem);
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getSummary() {
    return summary;
  }

  public void setSummary(Map<String, String> summary) {
    this.summary = summary;
  }

  public RepositoryItemMetadata itemName(Map<String, String> itemName) {
    this.itemName = itemName;
    return this;
  }

  public RepositoryItemMetadata putItemNameItem(String key, String itemNameItem) {
    if (this.itemName == null) {
      this.itemName = new HashMap<String, String>();
    }
    this.itemName.put(key, itemNameItem);
    return this;
  }

   /**
   * Get itemName
   * @return itemName
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getItemName() {
    return itemName;
  }

  public void setItemName(Map<String, String> itemName) {
    this.itemName = itemName;
  }

  public RepositoryItemMetadata label(Map<String, String> label) {
    this.label = label;
    return this;
  }

  public RepositoryItemMetadata putLabelItem(String key, String labelItem) {
    if (this.label == null) {
      this.label = new HashMap<String, String>();
    }
    this.label.put(key, labelItem);
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getLabel() {
    return label;
  }

  public void setLabel(Map<String, String> label) {
    this.label = label;
  }

  public RepositoryItemMetadata description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public RepositoryItemMetadata putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<String, String>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }

  public RepositoryItemMetadata itemType(UUID itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * Get itemType
   * @return itemType
  **/
  @ApiModelProperty(value = "")
  public UUID getItemType() {
    return itemType;
  }

  public void setItemType(UUID itemType) {
    this.itemType = itemType;
  }

  public RepositoryItemMetadata agencyId(String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

   /**
   * Get agencyId
   * @return agencyId
  **/
  @ApiModelProperty(value = "")
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }

  public RepositoryItemMetadata version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }

  public RepositoryItemMetadata identifier(UUID identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @ApiModelProperty(value = "")
  public UUID getIdentifier() {
    return identifier;
  }

  public void setIdentifier(UUID identifier) {
    this.identifier = identifier;
  }

  public RepositoryItemMetadata versionDate(DateTime versionDate) {
    this.versionDate = versionDate;
    return this;
  }

   /**
   * Get versionDate
   * @return versionDate
  **/
  @ApiModelProperty(value = "")
  public DateTime getVersionDate() {
    return versionDate;
  }

  public void setVersionDate(DateTime versionDate) {
    this.versionDate = versionDate;
  }

  public RepositoryItemMetadata versionResponsibility(String versionResponsibility) {
    this.versionResponsibility = versionResponsibility;
    return this;
  }

   /**
   * Get versionResponsibility
   * @return versionResponsibility
  **/
  @ApiModelProperty(value = "")
  public String getVersionResponsibility() {
    return versionResponsibility;
  }

  public void setVersionResponsibility(String versionResponsibility) {
    this.versionResponsibility = versionResponsibility;
  }

  public RepositoryItemMetadata isPublished(Boolean isPublished) {
    this.isPublished = isPublished;
    return this;
  }

   /**
   * Get isPublished
   * @return isPublished
  **/
  @ApiModelProperty(value = "")
  public Boolean getIsPublished() {
    return isPublished;
  }

  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }

  public RepositoryItemMetadata isDeprecated(Boolean isDeprecated) {
    this.isDeprecated = isDeprecated;
    return this;
  }

   /**
   * Get isDeprecated
   * @return isDeprecated
  **/
  @ApiModelProperty(value = "")
  public Boolean getIsDeprecated() {
    return isDeprecated;
  }

  public void setIsDeprecated(Boolean isDeprecated) {
    this.isDeprecated = isDeprecated;
  }

  public RepositoryItemMetadata tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public RepositoryItemMetadata addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryItemMetadata repositoryItemMetadata = (RepositoryItemMetadata) o;
    return Objects.equals(this.versionRationale, repositoryItemMetadata.versionRationale) &&
        Objects.equals(this.summary, repositoryItemMetadata.summary) &&
        Objects.equals(this.itemName, repositoryItemMetadata.itemName) &&
        Objects.equals(this.label, repositoryItemMetadata.label) &&
        Objects.equals(this.description, repositoryItemMetadata.description) &&
        Objects.equals(this.itemType, repositoryItemMetadata.itemType) &&
        Objects.equals(this.agencyId, repositoryItemMetadata.agencyId) &&
        Objects.equals(this.version, repositoryItemMetadata.version) &&
        Objects.equals(this.identifier, repositoryItemMetadata.identifier) &&
        Objects.equals(this.versionDate, repositoryItemMetadata.versionDate) &&
        Objects.equals(this.versionResponsibility, repositoryItemMetadata.versionResponsibility) &&
        Objects.equals(this.isPublished, repositoryItemMetadata.isPublished) &&
        Objects.equals(this.isDeprecated, repositoryItemMetadata.isDeprecated) &&
        Objects.equals(this.tags, repositoryItemMetadata.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionRationale, summary, itemName, label, description, itemType, agencyId, version, identifier, versionDate, versionResponsibility, isPublished, isDeprecated, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryItemMetadata {\n");
    
    sb.append("    versionRationale: ").append(toIndentedString(versionRationale)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    versionDate: ").append(toIndentedString(versionDate)).append("\n");
    sb.append("    versionResponsibility: ").append(toIndentedString(versionResponsibility)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    isDeprecated: ").append(toIndentedString(isDeprecated)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

