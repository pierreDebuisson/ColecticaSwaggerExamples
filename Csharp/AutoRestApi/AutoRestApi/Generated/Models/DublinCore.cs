// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ApiRestColectica.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DublinCore
    {
        /// <summary>
        /// Initializes a new instance of the DublinCore class.
        /// </summary>
        public DublinCore()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DublinCore class.
        /// </summary>
        public DublinCore(IDictionary<string, string> alternateTitle = default(IDictionary<string, string>), IDictionary<string, string> contributor = default(IDictionary<string, string>), IDictionary<string, string> coverage = default(IDictionary<string, string>), IDictionary<string, string> creator = default(IDictionary<string, string>), System.DateTime? date = default(System.DateTime?), IDictionary<string, string> description = default(IDictionary<string, string>), IDictionary<string, string> format = default(IDictionary<string, string>), IList<InternationalIdentifier> identifiers = default(IList<InternationalIdentifier>), IList<CodeValue> languages = default(IList<CodeValue>), IDictionary<string, string> publisher = default(IDictionary<string, string>), IDictionary<string, string> relation = default(IDictionary<string, string>), IDictionary<string, string> rights = default(IDictionary<string, string>), IDictionary<string, string> source = default(IDictionary<string, string>), IDictionary<string, string> subject = default(IDictionary<string, string>), IDictionary<string, string> subTitle = default(IDictionary<string, string>), IDictionary<string, string> title = default(IDictionary<string, string>), IDictionary<string, string> type = default(IDictionary<string, string>))
        {
            AlternateTitle = alternateTitle;
            Contributor = contributor;
            Coverage = coverage;
            Creator = creator;
            Date = date;
            Description = description;
            Format = format;
            Identifiers = identifiers;
            Languages = languages;
            Publisher = publisher;
            Relation = relation;
            Rights = rights;
            Source = source;
            Subject = subject;
            SubTitle = subTitle;
            Title = title;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AlternateTitle")]
        public IDictionary<string, string> AlternateTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Contributor")]
        public IDictionary<string, string> Contributor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Coverage")]
        public IDictionary<string, string> Coverage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Creator")]
        public IDictionary<string, string> Creator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Format")]
        public IDictionary<string, string> Format { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Identifiers")]
        public IList<InternationalIdentifier> Identifiers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Languages")]
        public IList<CodeValue> Languages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Publisher")]
        public IDictionary<string, string> Publisher { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Relation")]
        public IDictionary<string, string> Relation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Rights")]
        public IDictionary<string, string> Rights { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public IDictionary<string, string> Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Subject")]
        public IDictionary<string, string> Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubTitle")]
        public IDictionary<string, string> SubTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Title")]
        public IDictionary<string, string> Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public IDictionary<string, string> Type { get; set; }

    }
}
