/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Colectica.RestClientV1.Client;
using Colectica.RestClientV1.Model;

namespace Colectica.RestClientV1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRatingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the ratings for the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>List&lt;UserRating&gt;</returns>
        List<UserRating> ApiV1ItemByAgencyByIdByVersionRatingGet (string agency, Guid? id, string version);

        /// <summary>
        /// Gets the ratings for the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;UserRating&gt;</returns>
        ApiResponse<List<UserRating>> ApiV1ItemByAgencyByIdByVersionRatingGetWithHttpInfo (string agency, Guid? id, string version);
        /// <summary>
        /// Adds a rating to the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns></returns>
        void ApiV1ItemByAgencyByIdByVersionRatingPost (string agency, Guid? id, long? version, int? rating = null);

        /// <summary>
        /// Adds a rating to the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ItemByAgencyByIdByVersionRatingPostWithHttpInfo (string agency, Guid? id, long? version, int? rating = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the ratings for the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;UserRating&gt;</returns>
        System.Threading.Tasks.Task<List<UserRating>> ApiV1ItemByAgencyByIdByVersionRatingGetAsync (string agency, Guid? id, string version);

        /// <summary>
        /// Gets the ratings for the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;UserRating&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserRating>>> ApiV1ItemByAgencyByIdByVersionRatingGetAsyncWithHttpInfo (string agency, Guid? id, string version);
        /// <summary>
        /// Adds a rating to the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ItemByAgencyByIdByVersionRatingPostAsync (string agency, Guid? id, long? version, int? rating = null);

        /// <summary>
        /// Adds a rating to the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ItemByAgencyByIdByVersionRatingPostAsyncWithHttpInfo (string agency, Guid? id, long? version, int? rating = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RatingApi : IRatingApi
    {
        private Colectica.RestClientV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RatingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RatingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RatingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RatingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Colectica.RestClientV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the ratings for the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>List&lt;UserRating&gt;</returns>
        public List<UserRating> ApiV1ItemByAgencyByIdByVersionRatingGet (string agency, Guid? id, string version)
        {
             ApiResponse<List<UserRating>> localVarResponse = ApiV1ItemByAgencyByIdByVersionRatingGetWithHttpInfo(agency, id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the ratings for the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;UserRating&gt;</returns>
        public ApiResponse< List<UserRating> > ApiV1ItemByAgencyByIdByVersionRatingGetWithHttpInfo (string agency, Guid? id, string version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionRatingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserRating>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserRating>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserRating>)));
            
        }

        /// <summary>
        /// Gets the ratings for the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;UserRating&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserRating>> ApiV1ItemByAgencyByIdByVersionRatingGetAsync (string agency, Guid? id, string version)
        {
             ApiResponse<List<UserRating>> localVarResponse = await ApiV1ItemByAgencyByIdByVersionRatingGetAsyncWithHttpInfo(agency, id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the ratings for the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;UserRating&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserRating>>> ApiV1ItemByAgencyByIdByVersionRatingGetAsyncWithHttpInfo (string agency, Guid? id, string version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionRatingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserRating>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserRating>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserRating>)));
            
        }

        /// <summary>
        /// Adds a rating to the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns></returns>
        public void ApiV1ItemByAgencyByIdByVersionRatingPost (string agency, Guid? id, long? version, int? rating = null)
        {
             ApiV1ItemByAgencyByIdByVersionRatingPostWithHttpInfo(agency, id, version, rating);
        }

        /// <summary>
        /// Adds a rating to the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ItemByAgencyByIdByVersionRatingPostWithHttpInfo (string agency, Guid? id, long? version, int? rating = null)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingPost");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingPost");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (rating != null && rating.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rating); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rating; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionRatingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a rating to the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ItemByAgencyByIdByVersionRatingPostAsync (string agency, Guid? id, long? version, int? rating = null)
        {
             await ApiV1ItemByAgencyByIdByVersionRatingPostAsyncWithHttpInfo(agency, id, version, rating);

        }

        /// <summary>
        /// Adds a rating to the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="rating"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ItemByAgencyByIdByVersionRatingPostAsyncWithHttpInfo (string agency, Guid? id, long? version, int? rating = null)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingPost");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling RatingApi->ApiV1ItemByAgencyByIdByVersionRatingPost");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (rating != null && rating.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rating); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rating; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionRatingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
