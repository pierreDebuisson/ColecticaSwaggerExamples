/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Colectica.RestClientV1.Client;
using Colectica.RestClientV1.Model;

namespace Colectica.RestClientV1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the set of all items under the specified root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        List<IdentifierTriple> ApiV1SetByAgencyByIdByVersionGet (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets the set of all items under the specified root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        ApiResponse<List<IdentifierTriple>> ApiV1SetByAgencyByIdByVersionGetWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>List&lt;TypedIdTriple&gt;</returns>
        List<TypedIdTriple> ApiV1SetByAgencyByIdByVersionTypedGet (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;TypedIdTriple&gt;</returns>
        ApiResponse<List<TypedIdTriple>> ApiV1SetByAgencyByIdByVersionTypedGetWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        List<IdentifierTriple> ApiV1SetByAgencyByIdGet (string agency, Guid? id);

        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        ApiResponse<List<IdentifierTriple>> ApiV1SetByAgencyByIdGetWithHttpInfo (string agency, Guid? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the set of all items under the specified root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1SetByAgencyByIdByVersionGetAsync (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets the set of all items under the specified root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1SetByAgencyByIdByVersionGetAsyncWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;TypedIdTriple&gt;</returns>
        System.Threading.Tasks.Task<List<TypedIdTriple>> ApiV1SetByAgencyByIdByVersionTypedGetAsync (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;TypedIdTriple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypedIdTriple>>> ApiV1SetByAgencyByIdByVersionTypedGetAsyncWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1SetByAgencyByIdGetAsync (string agency, Guid? id);

        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1SetByAgencyByIdGetAsyncWithHttpInfo (string agency, Guid? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SetApi : ISetApi
    {
        private Colectica.RestClientV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SetApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SetApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Colectica.RestClientV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the set of all items under the specified root. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        public List<IdentifierTriple> ApiV1SetByAgencyByIdByVersionGet (string agency, Guid? id, long? version)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = ApiV1SetByAgencyByIdByVersionGetWithHttpInfo(agency, id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of all items under the specified root. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        public ApiResponse< List<IdentifierTriple> > ApiV1SetByAgencyByIdByVersionGetWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling SetApi->ApiV1SetByAgencyByIdByVersionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SetApi->ApiV1SetByAgencyByIdByVersionGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SetApi->ApiV1SetByAgencyByIdByVersionGet");

            var localVarPath = "/api/v1/set/{agency}/{id}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SetByAgencyByIdByVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

        /// <summary>
        /// Gets the set of all items under the specified root. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1SetByAgencyByIdByVersionGetAsync (string agency, Guid? id, long? version)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = await ApiV1SetByAgencyByIdByVersionGetAsyncWithHttpInfo(agency, id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the set of all items under the specified root. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1SetByAgencyByIdByVersionGetAsyncWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling SetApi->ApiV1SetByAgencyByIdByVersionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SetApi->ApiV1SetByAgencyByIdByVersionGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SetApi->ApiV1SetByAgencyByIdByVersionGet");

            var localVarPath = "/api/v1/set/{agency}/{id}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SetByAgencyByIdByVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>List&lt;TypedIdTriple&gt;</returns>
        public List<TypedIdTriple> ApiV1SetByAgencyByIdByVersionTypedGet (string agency, Guid? id, long? version)
        {
             ApiResponse<List<TypedIdTriple>> localVarResponse = ApiV1SetByAgencyByIdByVersionTypedGetWithHttpInfo(agency, id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;TypedIdTriple&gt;</returns>
        public ApiResponse< List<TypedIdTriple> > ApiV1SetByAgencyByIdByVersionTypedGetWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling SetApi->ApiV1SetByAgencyByIdByVersionTypedGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SetApi->ApiV1SetByAgencyByIdByVersionTypedGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SetApi->ApiV1SetByAgencyByIdByVersionTypedGet");

            var localVarPath = "/api/v1/set/{agency}/{id}/{version}/typed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SetByAgencyByIdByVersionTypedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypedIdTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypedIdTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypedIdTriple>)));
            
        }

        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;TypedIdTriple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypedIdTriple>> ApiV1SetByAgencyByIdByVersionTypedGetAsync (string agency, Guid? id, long? version)
        {
             ApiResponse<List<TypedIdTriple>> localVarResponse = await ApiV1SetByAgencyByIdByVersionTypedGetAsyncWithHttpInfo(agency, id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the set of all items under the specified root. The returned               identifiers include the type of each item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;TypedIdTriple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypedIdTriple>>> ApiV1SetByAgencyByIdByVersionTypedGetAsyncWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling SetApi->ApiV1SetByAgencyByIdByVersionTypedGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SetApi->ApiV1SetByAgencyByIdByVersionTypedGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SetApi->ApiV1SetByAgencyByIdByVersionTypedGet");

            var localVarPath = "/api/v1/set/{agency}/{id}/{version}/typed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SetByAgencyByIdByVersionTypedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypedIdTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypedIdTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypedIdTriple>)));
            
        }

        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        public List<IdentifierTriple> ApiV1SetByAgencyByIdGet (string agency, Guid? id)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = ApiV1SetByAgencyByIdGetWithHttpInfo(agency, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        public ApiResponse< List<IdentifierTriple> > ApiV1SetByAgencyByIdGetWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling SetApi->ApiV1SetByAgencyByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SetApi->ApiV1SetByAgencyByIdGet");

            var localVarPath = "/api/v1/set/{agency}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SetByAgencyByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1SetByAgencyByIdGetAsync (string agency, Guid? id)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = await ApiV1SetByAgencyByIdGetAsyncWithHttpInfo(agency, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the set of items defined by the specified root. Each item in the set will              have the latest version number for that item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1SetByAgencyByIdGetAsyncWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling SetApi->ApiV1SetByAgencyByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SetApi->ApiV1SetByAgencyByIdGet");

            var localVarPath = "/api/v1/set/{agency}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SetByAgencyByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

    }
}
