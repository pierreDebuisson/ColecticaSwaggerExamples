/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Colectica.RestClientV1.Client;
using Colectica.RestClientV1.Model;

namespace Colectica.RestClientV1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns></returns>
        void ApiV1SettingBySettingDelete (string setting);

        /// <summary>
        /// Removes the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SettingBySettingDeleteWithHttpInfo (string setting);
        /// <summary>
        /// Gets the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>RepositorySetting</returns>
        RepositorySetting ApiV1SettingBySettingGet (string setting);

        /// <summary>
        /// Gets the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>ApiResponse of RepositorySetting</returns>
        ApiResponse<RepositorySetting> ApiV1SettingBySettingGetWithHttpInfo (string setting);
        /// <summary>
        /// Gets all the repository settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RepositorySetting&gt;</returns>
        List<RepositorySetting> ApiV1SettingGet ();

        /// <summary>
        /// Gets all the repository settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RepositorySetting&gt;</returns>
        ApiResponse<List<RepositorySetting>> ApiV1SettingGetWithHttpInfo ();
        /// <summary>
        /// Adds or updates a repository setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void ApiV1SettingPost (RepositorySetting request = null);

        /// <summary>
        /// Adds or updates a repository setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SettingPostWithHttpInfo (RepositorySetting request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Removes the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SettingBySettingDeleteAsync (string setting);

        /// <summary>
        /// Removes the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SettingBySettingDeleteAsyncWithHttpInfo (string setting);
        /// <summary>
        /// Gets the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of RepositorySetting</returns>
        System.Threading.Tasks.Task<RepositorySetting> ApiV1SettingBySettingGetAsync (string setting);

        /// <summary>
        /// Gets the repository setting with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of ApiResponse (RepositorySetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositorySetting>> ApiV1SettingBySettingGetAsyncWithHttpInfo (string setting);
        /// <summary>
        /// Gets all the repository settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RepositorySetting&gt;</returns>
        System.Threading.Tasks.Task<List<RepositorySetting>> ApiV1SettingGetAsync ();

        /// <summary>
        /// Gets all the repository settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RepositorySetting&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositorySetting>>> ApiV1SettingGetAsyncWithHttpInfo ();
        /// <summary>
        /// Adds or updates a repository setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SettingPostAsync (RepositorySetting request = null);

        /// <summary>
        /// Adds or updates a repository setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SettingPostAsyncWithHttpInfo (RepositorySetting request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingApi : ISettingApi
    {
        private Colectica.RestClientV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Colectica.RestClientV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Removes the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns></returns>
        public void ApiV1SettingBySettingDelete (string setting)
        {
             ApiV1SettingBySettingDeleteWithHttpInfo(setting);
        }

        /// <summary>
        /// Removes the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SettingBySettingDeleteWithHttpInfo (string setting)
        {
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling SettingApi->ApiV1SettingBySettingDelete");

            var localVarPath = "/api/v1/setting/{setting}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (setting != null) localVarPathParams.Add("setting", Configuration.ApiClient.ParameterToString(setting)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingBySettingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SettingBySettingDeleteAsync (string setting)
        {
             await ApiV1SettingBySettingDeleteAsyncWithHttpInfo(setting);

        }

        /// <summary>
        /// Removes the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SettingBySettingDeleteAsyncWithHttpInfo (string setting)
        {
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling SettingApi->ApiV1SettingBySettingDelete");

            var localVarPath = "/api/v1/setting/{setting}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (setting != null) localVarPathParams.Add("setting", Configuration.ApiClient.ParameterToString(setting)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingBySettingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>RepositorySetting</returns>
        public RepositorySetting ApiV1SettingBySettingGet (string setting)
        {
             ApiResponse<RepositorySetting> localVarResponse = ApiV1SettingBySettingGetWithHttpInfo(setting);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>ApiResponse of RepositorySetting</returns>
        public ApiResponse< RepositorySetting > ApiV1SettingBySettingGetWithHttpInfo (string setting)
        {
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling SettingApi->ApiV1SettingBySettingGet");

            var localVarPath = "/api/v1/setting/{setting}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (setting != null) localVarPathParams.Add("setting", Configuration.ApiClient.ParameterToString(setting)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingBySettingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositorySetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositorySetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositorySetting)));
            
        }

        /// <summary>
        /// Gets the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of RepositorySetting</returns>
        public async System.Threading.Tasks.Task<RepositorySetting> ApiV1SettingBySettingGetAsync (string setting)
        {
             ApiResponse<RepositorySetting> localVarResponse = await ApiV1SettingBySettingGetAsyncWithHttpInfo(setting);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the repository setting with the specified name. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting"></param>
        /// <returns>Task of ApiResponse (RepositorySetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositorySetting>> ApiV1SettingBySettingGetAsyncWithHttpInfo (string setting)
        {
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling SettingApi->ApiV1SettingBySettingGet");

            var localVarPath = "/api/v1/setting/{setting}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (setting != null) localVarPathParams.Add("setting", Configuration.ApiClient.ParameterToString(setting)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingBySettingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositorySetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositorySetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositorySetting)));
            
        }

        /// <summary>
        /// Gets all the repository settings. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RepositorySetting&gt;</returns>
        public List<RepositorySetting> ApiV1SettingGet ()
        {
             ApiResponse<List<RepositorySetting>> localVarResponse = ApiV1SettingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the repository settings. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RepositorySetting&gt;</returns>
        public ApiResponse< List<RepositorySetting> > ApiV1SettingGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositorySetting>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositorySetting>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositorySetting>)));
            
        }

        /// <summary>
        /// Gets all the repository settings. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RepositorySetting&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositorySetting>> ApiV1SettingGetAsync ()
        {
             ApiResponse<List<RepositorySetting>> localVarResponse = await ApiV1SettingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the repository settings. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RepositorySetting&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RepositorySetting>>> ApiV1SettingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositorySetting>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositorySetting>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositorySetting>)));
            
        }

        /// <summary>
        /// Adds or updates a repository setting. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void ApiV1SettingPost (RepositorySetting request = null)
        {
             ApiV1SettingPostWithHttpInfo(request);
        }

        /// <summary>
        /// Adds or updates a repository setting. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SettingPostWithHttpInfo (RepositorySetting request = null)
        {

            var localVarPath = "/api/v1/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds or updates a repository setting. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SettingPostAsync (RepositorySetting request = null)
        {
             await ApiV1SettingPostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// Adds or updates a repository setting. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SettingPostAsyncWithHttpInfo (RepositorySetting request = null)
        {

            var localVarPath = "/api/v1/setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SettingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
