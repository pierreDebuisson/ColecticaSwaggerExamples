/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Colectica.RestClientV1.Client;
using Colectica.RestClientV1.Model;

namespace Colectica.RestClientV1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionNumberApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>long?</returns>
        long? ApiV1ItemByAgencyByIdByTagVersionsLatestGet (string agency, Guid? id, string tag);

        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> ApiV1ItemByAgencyByIdByTagVersionsLatestGetWithHttpInfo (string agency, Guid? id, string tag);
        /// <summary>
        /// Gets a list of all versions of the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        List<IdentifierTriple> ApiV1ItemByAgencyByIdVersionsGet (string agency, Guid? id);

        /// <summary>
        /// Gets a list of all versions of the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        ApiResponse<List<IdentifierTriple>> ApiV1ItemByAgencyByIdVersionsGetWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets the latest version number of a repository item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>long?</returns>
        long? ApiV1ItemByAgencyByIdVersionsLatestGet (string agency, Guid? id);

        /// <summary>
        /// Gets the latest version number of a repository item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> ApiV1ItemByAgencyByIdVersionsLatestGetWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets the latest version numbers of multiple items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        List<IdentifierTriple> ApiV1ItemGetLatestVersionNumbersPost (GetLatestVersionNumbersRequest request = null);

        /// <summary>
        /// Gets the latest version numbers of multiple items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        ApiResponse<List<IdentifierTriple>> ApiV1ItemGetLatestVersionNumbersPostWithHttpInfo (GetLatestVersionNumbersRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> ApiV1ItemByAgencyByIdByTagVersionsLatestGetAsync (string agency, Guid? id, string tag);

        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> ApiV1ItemByAgencyByIdByTagVersionsLatestGetAsyncWithHttpInfo (string agency, Guid? id, string tag);
        /// <summary>
        /// Gets a list of all versions of the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1ItemByAgencyByIdVersionsGetAsync (string agency, Guid? id);

        /// <summary>
        /// Gets a list of all versions of the specified item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1ItemByAgencyByIdVersionsGetAsyncWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets the latest version number of a repository item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> ApiV1ItemByAgencyByIdVersionsLatestGetAsync (string agency, Guid? id);

        /// <summary>
        /// Gets the latest version number of a repository item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> ApiV1ItemByAgencyByIdVersionsLatestGetAsyncWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets the latest version numbers of multiple items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1ItemGetLatestVersionNumbersPostAsync (GetLatestVersionNumbersRequest request = null);

        /// <summary>
        /// Gets the latest version numbers of multiple items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1ItemGetLatestVersionNumbersPostAsyncWithHttpInfo (GetLatestVersionNumbersRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VersionNumberApi : IVersionNumberApi
    {
        private Colectica.RestClientV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionNumberApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VersionNumberApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionNumberApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VersionNumberApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Colectica.RestClientV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>long?</returns>
        public long? ApiV1ItemByAgencyByIdByTagVersionsLatestGet (string agency, Guid? id, string tag)
        {
             ApiResponse<long?> localVarResponse = ApiV1ItemByAgencyByIdByTagVersionsLatestGetWithHttpInfo(agency, id, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > ApiV1ItemByAgencyByIdByTagVersionsLatestGetWithHttpInfo (string agency, Guid? id, string tag)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling VersionNumberApi->ApiV1ItemByAgencyByIdByTagVersionsLatestGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionNumberApi->ApiV1ItemByAgencyByIdByTagVersionsLatestGet");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling VersionNumberApi->ApiV1ItemByAgencyByIdByTagVersionsLatestGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{tag}/versions/_latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByTagVersionsLatestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> ApiV1ItemByAgencyByIdByTagVersionsLatestGetAsync (string agency, Guid? id, string tag)
        {
             ApiResponse<long?> localVarResponse = await ApiV1ItemByAgencyByIdByTagVersionsLatestGetAsyncWithHttpInfo(agency, id, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the latest version number of the specified repository item that has the specified tag. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="tag"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> ApiV1ItemByAgencyByIdByTagVersionsLatestGetAsyncWithHttpInfo (string agency, Guid? id, string tag)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling VersionNumberApi->ApiV1ItemByAgencyByIdByTagVersionsLatestGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionNumberApi->ApiV1ItemByAgencyByIdByTagVersionsLatestGet");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling VersionNumberApi->ApiV1ItemByAgencyByIdByTagVersionsLatestGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{tag}/versions/_latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByTagVersionsLatestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Gets a list of all versions of the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        public List<IdentifierTriple> ApiV1ItemByAgencyByIdVersionsGet (string agency, Guid? id)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = ApiV1ItemByAgencyByIdVersionsGetWithHttpInfo(agency, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all versions of the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        public ApiResponse< List<IdentifierTriple> > ApiV1ItemByAgencyByIdVersionsGetWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdVersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

        /// <summary>
        /// Gets a list of all versions of the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1ItemByAgencyByIdVersionsGetAsync (string agency, Guid? id)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = await ApiV1ItemByAgencyByIdVersionsGetAsyncWithHttpInfo(agency, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all versions of the specified item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1ItemByAgencyByIdVersionsGetAsyncWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdVersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

        /// <summary>
        /// Gets the latest version number of a repository item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>long?</returns>
        public long? ApiV1ItemByAgencyByIdVersionsLatestGet (string agency, Guid? id)
        {
             ApiResponse<long?> localVarResponse = ApiV1ItemByAgencyByIdVersionsLatestGetWithHttpInfo(agency, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the latest version number of a repository item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > ApiV1ItemByAgencyByIdVersionsLatestGetWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsLatestGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsLatestGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/versions/_latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdVersionsLatestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Gets the latest version number of a repository item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> ApiV1ItemByAgencyByIdVersionsLatestGetAsync (string agency, Guid? id)
        {
             ApiResponse<long?> localVarResponse = await ApiV1ItemByAgencyByIdVersionsLatestGetAsyncWithHttpInfo(agency, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the latest version number of a repository item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> ApiV1ItemByAgencyByIdVersionsLatestGetAsyncWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsLatestGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionNumberApi->ApiV1ItemByAgencyByIdVersionsLatestGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/versions/_latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdVersionsLatestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Gets the latest version numbers of multiple items. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;IdentifierTriple&gt;</returns>
        public List<IdentifierTriple> ApiV1ItemGetLatestVersionNumbersPost (GetLatestVersionNumbersRequest request = null)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = ApiV1ItemGetLatestVersionNumbersPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the latest version numbers of multiple items. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;IdentifierTriple&gt;</returns>
        public ApiResponse< List<IdentifierTriple> > ApiV1ItemGetLatestVersionNumbersPostWithHttpInfo (GetLatestVersionNumbersRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getLatestVersionNumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetLatestVersionNumbersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

        /// <summary>
        /// Gets the latest version numbers of multiple items. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;IdentifierTriple&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdentifierTriple>> ApiV1ItemGetLatestVersionNumbersPostAsync (GetLatestVersionNumbersRequest request = null)
        {
             ApiResponse<List<IdentifierTriple>> localVarResponse = await ApiV1ItemGetLatestVersionNumbersPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the latest version numbers of multiple items. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IdentifierTriple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdentifierTriple>>> ApiV1ItemGetLatestVersionNumbersPostAsyncWithHttpInfo (GetLatestVersionNumbersRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getLatestVersionNumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetLatestVersionNumbersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentifierTriple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IdentifierTriple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentifierTriple>)));
            
        }

    }
}
