/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Colectica.RestClientV1.Client;
using Colectica.RestClientV1.Model;

namespace Colectica.RestClientV1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>RepositoryItemMetadata</returns>
        RepositoryItemMetadata ApiV1ItemByAgencyByIdByVersionDescriptionGet (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of RepositoryItemMetadata</returns>
        ApiResponse<RepositoryItemMetadata> ApiV1ItemByAgencyByIdByVersionDescriptionGetWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>RepositoryItem</returns>
        RepositoryItem ApiV1ItemByAgencyByIdByVersionGet (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of RepositoryItem</returns>
        ApiResponse<RepositoryItem> ApiV1ItemByAgencyByIdByVersionGetWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets the latest version of an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>RepositoryItemMetadata</returns>
        RepositoryItemMetadata ApiV1ItemByAgencyByIdGet (string agency, Guid? id);

        /// <summary>
        /// Gets the latest version of an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RepositoryItemMetadata</returns>
        ApiResponse<RepositoryItemMetadata> ApiV1ItemByAgencyByIdGetWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets the version history of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;RepositoryItemMetadata&gt;</returns>
        List<RepositoryItemMetadata> ApiV1ItemByAgencyByIdHistoryGet (string agency, Guid? id);

        /// <summary>
        /// Gets the version history of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;RepositoryItemMetadata&gt;</returns>
        ApiResponse<List<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdHistoryGetWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryItemMetadata&gt;</returns>
        List<RepositoryItemMetadata> ApiV1ItemGetDescriptionsPost (GetRepositoryItemDescriptionsRequest request = null);

        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryItemMetadata&gt;</returns>
        ApiResponse<List<RepositoryItemMetadata>> ApiV1ItemGetDescriptionsPostWithHttpInfo (GetRepositoryItemDescriptionsRequest request = null);
        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryItem&gt;</returns>
        List<RepositoryItem> ApiV1ItemGetListLatestPost (GetLatestItemsRequest request = null);

        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryItem&gt;</returns>
        ApiResponse<List<RepositoryItem>> ApiV1ItemGetListLatestPostWithHttpInfo (GetLatestItemsRequest request = null);
        /// <summary>
        /// Gets multiple items from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryItemMetadata&gt;</returns>
        List<RepositoryItemMetadata> ApiV1ItemGetListPost (GetItemsRequest request = null);

        /// <summary>
        /// Gets multiple items from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryItemMetadata&gt;</returns>
        ApiResponse<List<RepositoryItemMetadata>> ApiV1ItemGetListPostWithHttpInfo (GetItemsRequest request = null);
        /// <summary>
        /// Registers the items in the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryConflict&gt;</returns>
        List<RepositoryConflict> ApiV1ItemPost (RegisterItemsRequest request = null);

        /// <summary>
        /// Registers the items in the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryConflict&gt;</returns>
        ApiResponse<List<RepositoryConflict>> ApiV1ItemPostWithHttpInfo (RegisterItemsRequest request = null);
        /// <summary>
        /// Updates the Deprecated State of a set of items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void ApiV1ItemUpdateStatePost (UpdateStateRequest request = null);

        /// <summary>
        /// Updates the Deprecated State of a set of items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ItemUpdateStatePostWithHttpInfo (UpdateStateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of RepositoryItemMetadata</returns>
        System.Threading.Tasks.Task<RepositoryItemMetadata> ApiV1ItemByAgencyByIdByVersionDescriptionGetAsync (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (RepositoryItemMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdByVersionDescriptionGetAsyncWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of RepositoryItem</returns>
        System.Threading.Tasks.Task<RepositoryItem> ApiV1ItemByAgencyByIdByVersionGetAsync (string agency, Guid? id, long? version);

        /// <summary>
        /// Gets an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (RepositoryItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryItem>> ApiV1ItemByAgencyByIdByVersionGetAsyncWithHttpInfo (string agency, Guid? id, long? version);
        /// <summary>
        /// Gets the latest version of an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of RepositoryItemMetadata</returns>
        System.Threading.Tasks.Task<RepositoryItemMetadata> ApiV1ItemByAgencyByIdGetAsync (string agency, Guid? id);

        /// <summary>
        /// Gets the latest version of an item from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RepositoryItemMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdGetAsyncWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets the version history of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;RepositoryItemMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdHistoryGetAsync (string agency, Guid? id);

        /// <summary>
        /// Gets the version history of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItemMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositoryItemMetadata>>> ApiV1ItemByAgencyByIdHistoryGetAsyncWithHttpInfo (string agency, Guid? id);
        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryItemMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<RepositoryItemMetadata>> ApiV1ItemGetDescriptionsPostAsync (GetRepositoryItemDescriptionsRequest request = null);

        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItemMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositoryItemMetadata>>> ApiV1ItemGetDescriptionsPostAsyncWithHttpInfo (GetRepositoryItemDescriptionsRequest request = null);
        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<RepositoryItem>> ApiV1ItemGetListLatestPostAsync (GetLatestItemsRequest request = null);

        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositoryItem>>> ApiV1ItemGetListLatestPostAsyncWithHttpInfo (GetLatestItemsRequest request = null);
        /// <summary>
        /// Gets multiple items from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryItemMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<RepositoryItemMetadata>> ApiV1ItemGetListPostAsync (GetItemsRequest request = null);

        /// <summary>
        /// Gets multiple items from the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItemMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositoryItemMetadata>>> ApiV1ItemGetListPostAsyncWithHttpInfo (GetItemsRequest request = null);
        /// <summary>
        /// Registers the items in the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryConflict&gt;</returns>
        System.Threading.Tasks.Task<List<RepositoryConflict>> ApiV1ItemPostAsync (RegisterItemsRequest request = null);

        /// <summary>
        /// Registers the items in the repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryConflict&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositoryConflict>>> ApiV1ItemPostAsyncWithHttpInfo (RegisterItemsRequest request = null);
        /// <summary>
        /// Updates the Deprecated State of a set of items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ItemUpdateStatePostAsync (UpdateStateRequest request = null);

        /// <summary>
        /// Updates the Deprecated State of a set of items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ItemUpdateStatePostAsyncWithHttpInfo (UpdateStateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemApi : IItemApi
    {
        private Colectica.RestClientV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Colectica.RestClientV1.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Colectica.RestClientV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>RepositoryItemMetadata</returns>
        public RepositoryItemMetadata ApiV1ItemByAgencyByIdByVersionDescriptionGet (string agency, Guid? id, long? version)
        {
             ApiResponse<RepositoryItemMetadata> localVarResponse = ApiV1ItemByAgencyByIdByVersionDescriptionGetWithHttpInfo(agency, id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of RepositoryItemMetadata</returns>
        public ApiResponse< RepositoryItemMetadata > ApiV1ItemByAgencyByIdByVersionDescriptionGetWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionDescriptionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionDescriptionGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionDescriptionGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionDescriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryItemMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositoryItemMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryItemMetadata)));
            
        }

        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of RepositoryItemMetadata</returns>
        public async System.Threading.Tasks.Task<RepositoryItemMetadata> ApiV1ItemByAgencyByIdByVersionDescriptionGetAsync (string agency, Guid? id, long? version)
        {
             ApiResponse<RepositoryItemMetadata> localVarResponse = await ApiV1ItemByAgencyByIdByVersionDescriptionGetAsyncWithHttpInfo(agency, id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a description of a repository item. The description              contains identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (RepositoryItemMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdByVersionDescriptionGetAsyncWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionDescriptionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionDescriptionGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionDescriptionGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionDescriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryItemMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositoryItemMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryItemMetadata)));
            
        }

        /// <summary>
        /// Gets an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>RepositoryItem</returns>
        public RepositoryItem ApiV1ItemByAgencyByIdByVersionGet (string agency, Guid? id, long? version)
        {
             ApiResponse<RepositoryItem> localVarResponse = ApiV1ItemByAgencyByIdByVersionGetWithHttpInfo(agency, id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of RepositoryItem</returns>
        public ApiResponse< RepositoryItem > ApiV1ItemByAgencyByIdByVersionGetWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryItem)));
            
        }

        /// <summary>
        /// Gets an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of RepositoryItem</returns>
        public async System.Threading.Tasks.Task<RepositoryItem> ApiV1ItemByAgencyByIdByVersionGetAsync (string agency, Guid? id, long? version)
        {
             ApiResponse<RepositoryItem> localVarResponse = await ApiV1ItemByAgencyByIdByVersionGetAsyncWithHttpInfo(agency, id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (RepositoryItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryItem>> ApiV1ItemByAgencyByIdByVersionGetAsyncWithHttpInfo (string agency, Guid? id, long? version)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ItemApi->ApiV1ItemByAgencyByIdByVersionGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdByVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryItem)));
            
        }

        /// <summary>
        /// Gets the latest version of an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>RepositoryItemMetadata</returns>
        public RepositoryItemMetadata ApiV1ItemByAgencyByIdGet (string agency, Guid? id)
        {
             ApiResponse<RepositoryItemMetadata> localVarResponse = ApiV1ItemByAgencyByIdGetWithHttpInfo(agency, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the latest version of an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RepositoryItemMetadata</returns>
        public ApiResponse< RepositoryItemMetadata > ApiV1ItemByAgencyByIdGetWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdGet");

            var localVarPath = "/api/v1/item/{agency}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryItemMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositoryItemMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryItemMetadata)));
            
        }

        /// <summary>
        /// Gets the latest version of an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of RepositoryItemMetadata</returns>
        public async System.Threading.Tasks.Task<RepositoryItemMetadata> ApiV1ItemByAgencyByIdGetAsync (string agency, Guid? id)
        {
             ApiResponse<RepositoryItemMetadata> localVarResponse = await ApiV1ItemByAgencyByIdGetAsyncWithHttpInfo(agency, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the latest version of an item from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RepositoryItemMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdGetAsyncWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdGet");

            var localVarPath = "/api/v1/item/{agency}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryItemMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RepositoryItemMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryItemMetadata)));
            
        }

        /// <summary>
        /// Gets the version history of an item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;RepositoryItemMetadata&gt;</returns>
        public List<RepositoryItemMetadata> ApiV1ItemByAgencyByIdHistoryGet (string agency, Guid? id)
        {
             ApiResponse<List<RepositoryItemMetadata>> localVarResponse = ApiV1ItemByAgencyByIdHistoryGetWithHttpInfo(agency, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the version history of an item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;RepositoryItemMetadata&gt;</returns>
        public ApiResponse< List<RepositoryItemMetadata> > ApiV1ItemByAgencyByIdHistoryGetWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdHistoryGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdHistoryGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItemMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItemMetadata>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItemMetadata>)));
            
        }

        /// <summary>
        /// Gets the version history of an item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;RepositoryItemMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositoryItemMetadata>> ApiV1ItemByAgencyByIdHistoryGetAsync (string agency, Guid? id)
        {
             ApiResponse<List<RepositoryItemMetadata>> localVarResponse = await ApiV1ItemByAgencyByIdHistoryGetAsyncWithHttpInfo(agency, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the version history of an item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agency"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItemMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RepositoryItemMetadata>>> ApiV1ItemByAgencyByIdHistoryGetAsyncWithHttpInfo (string agency, Guid? id)
        {
            // verify the required parameter 'agency' is set
            if (agency == null)
                throw new ApiException(400, "Missing required parameter 'agency' when calling ItemApi->ApiV1ItemByAgencyByIdHistoryGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->ApiV1ItemByAgencyByIdHistoryGet");

            var localVarPath = "/api/v1/item/{agency}/{id}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (agency != null) localVarPathParams.Add("agency", Configuration.ApiClient.ParameterToString(agency)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemByAgencyByIdHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItemMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItemMetadata>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItemMetadata>)));
            
        }

        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryItemMetadata&gt;</returns>
        public List<RepositoryItemMetadata> ApiV1ItemGetDescriptionsPost (GetRepositoryItemDescriptionsRequest request = null)
        {
             ApiResponse<List<RepositoryItemMetadata>> localVarResponse = ApiV1ItemGetDescriptionsPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryItemMetadata&gt;</returns>
        public ApiResponse< List<RepositoryItemMetadata> > ApiV1ItemGetDescriptionsPostWithHttpInfo (GetRepositoryItemDescriptionsRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getDescriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetDescriptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItemMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItemMetadata>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItemMetadata>)));
            
        }

        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryItemMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositoryItemMetadata>> ApiV1ItemGetDescriptionsPostAsync (GetRepositoryItemDescriptionsRequest request = null)
        {
             ApiResponse<List<RepositoryItemMetadata>> localVarResponse = await ApiV1ItemGetDescriptionsPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets descriptions of multiple repository items. The descriptions              contain identification, naming, and summary information, but not the entire contents of the item. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItemMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RepositoryItemMetadata>>> ApiV1ItemGetDescriptionsPostAsyncWithHttpInfo (GetRepositoryItemDescriptionsRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getDescriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetDescriptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItemMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItemMetadata>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItemMetadata>)));
            
        }

        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryItem&gt;</returns>
        public List<RepositoryItem> ApiV1ItemGetListLatestPost (GetLatestItemsRequest request = null)
        {
             ApiResponse<List<RepositoryItem>> localVarResponse = ApiV1ItemGetListLatestPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryItem&gt;</returns>
        public ApiResponse< List<RepositoryItem> > ApiV1ItemGetListLatestPostWithHttpInfo (GetLatestItemsRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getListLatest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetListLatestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItem>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItem>)));
            
        }

        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositoryItem>> ApiV1ItemGetListLatestPostAsync (GetLatestItemsRequest request = null)
        {
             ApiResponse<List<RepositoryItem>> localVarResponse = await ApiV1ItemGetListLatestPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the latest versions of undeserialized items from the repository.               To retrieve deserialized 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RepositoryItem>>> ApiV1ItemGetListLatestPostAsyncWithHttpInfo (GetLatestItemsRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getListLatest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetListLatestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItem>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItem>)));
            
        }

        /// <summary>
        /// Gets multiple items from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryItemMetadata&gt;</returns>
        public List<RepositoryItemMetadata> ApiV1ItemGetListPost (GetItemsRequest request = null)
        {
             ApiResponse<List<RepositoryItemMetadata>> localVarResponse = ApiV1ItemGetListPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets multiple items from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryItemMetadata&gt;</returns>
        public ApiResponse< List<RepositoryItemMetadata> > ApiV1ItemGetListPostWithHttpInfo (GetItemsRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItemMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItemMetadata>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItemMetadata>)));
            
        }

        /// <summary>
        /// Gets multiple items from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryItemMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositoryItemMetadata>> ApiV1ItemGetListPostAsync (GetItemsRequest request = null)
        {
             ApiResponse<List<RepositoryItemMetadata>> localVarResponse = await ApiV1ItemGetListPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets multiple items from the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryItemMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RepositoryItemMetadata>>> ApiV1ItemGetListPostAsyncWithHttpInfo (GetItemsRequest request = null)
        {

            var localVarPath = "/api/v1/item/_getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemGetListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryItemMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryItemMetadata>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryItemMetadata>)));
            
        }

        /// <summary>
        /// Registers the items in the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;RepositoryConflict&gt;</returns>
        public List<RepositoryConflict> ApiV1ItemPost (RegisterItemsRequest request = null)
        {
             ApiResponse<List<RepositoryConflict>> localVarResponse = ApiV1ItemPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Registers the items in the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RepositoryConflict&gt;</returns>
        public ApiResponse< List<RepositoryConflict> > ApiV1ItemPostWithHttpInfo (RegisterItemsRequest request = null)
        {

            var localVarPath = "/api/v1/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryConflict>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryConflict>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryConflict>)));
            
        }

        /// <summary>
        /// Registers the items in the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;RepositoryConflict&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositoryConflict>> ApiV1ItemPostAsync (RegisterItemsRequest request = null)
        {
             ApiResponse<List<RepositoryConflict>> localVarResponse = await ApiV1ItemPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Registers the items in the repository. 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryConflict&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RepositoryConflict>>> ApiV1ItemPostAsyncWithHttpInfo (RegisterItemsRequest request = null)
        {

            var localVarPath = "/api/v1/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RepositoryConflict>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RepositoryConflict>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RepositoryConflict>)));
            
        }

        /// <summary>
        /// Updates the Deprecated State of a set of items 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void ApiV1ItemUpdateStatePost (UpdateStateRequest request = null)
        {
             ApiV1ItemUpdateStatePostWithHttpInfo(request);
        }

        /// <summary>
        /// Updates the Deprecated State of a set of items 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ItemUpdateStatePostWithHttpInfo (UpdateStateRequest request = null)
        {

            var localVarPath = "/api/v1/item/_updateState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemUpdateStatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the Deprecated State of a set of items 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ItemUpdateStatePostAsync (UpdateStateRequest request = null)
        {
             await ApiV1ItemUpdateStatePostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// Updates the Deprecated State of a set of items 
        /// </summary>
        /// <exception cref="Colectica.RestClientV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ItemUpdateStatePostAsyncWithHttpInfo (UpdateStateRequest request = null)
        {

            var localVarPath = "/api/v1/item/_updateState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ItemUpdateStatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
