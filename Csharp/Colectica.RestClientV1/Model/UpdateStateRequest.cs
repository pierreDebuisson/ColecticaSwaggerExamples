/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// UpdateStateRequest
    /// </summary>
    [DataContract]
    public partial class UpdateStateRequest :  IEquatable<UpdateStateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateStateRequest" /> class.
        /// </summary>
        /// <param name="Ids">Ids.</param>
        /// <param name="State">State.</param>
        /// <param name="ApplyToAllVersions">ApplyToAllVersions.</param>
        public UpdateStateRequest(List<IdentifierInRequest> Ids = default(List<IdentifierInRequest>), bool? State = default(bool?), bool? ApplyToAllVersions = default(bool?))
        {
            this.Ids = Ids;
            this.State = State;
            this.ApplyToAllVersions = ApplyToAllVersions;
        }
        
        /// <summary>
        /// Gets or Sets Ids
        /// </summary>
        [DataMember(Name="Ids", EmitDefaultValue=false)]
        public List<IdentifierInRequest> Ids { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public bool? State { get; set; }
        /// <summary>
        /// Gets or Sets ApplyToAllVersions
        /// </summary>
        [DataMember(Name="ApplyToAllVersions", EmitDefaultValue=false)]
        public bool? ApplyToAllVersions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateStateRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ApplyToAllVersions: ").Append(ApplyToAllVersions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateStateRequest);
        }

        /// <summary>
        /// Returns true if UpdateStateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateStateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateStateRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Ids == other.Ids ||
                    this.Ids != null &&
                    this.Ids.SequenceEqual(other.Ids)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.ApplyToAllVersions == other.ApplyToAllVersions ||
                    this.ApplyToAllVersions != null &&
                    this.ApplyToAllVersions.Equals(other.ApplyToAllVersions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Ids != null)
                    hash = hash * 59 + this.Ids.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.ApplyToAllVersions != null)
                    hash = hash * 59 + this.ApplyToAllVersions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
