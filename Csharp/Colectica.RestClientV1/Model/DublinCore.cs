/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// DublinCore
    /// </summary>
    [DataContract]
    public partial class DublinCore :  IEquatable<DublinCore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DublinCore" /> class.
        /// </summary>
        /// <param name="AlternateTitle">AlternateTitle.</param>
        /// <param name="Contributor">Contributor.</param>
        /// <param name="Coverage">Coverage.</param>
        /// <param name="Creator">Creator.</param>
        /// <param name="Date">Date.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Format">Format.</param>
        /// <param name="Identifiers">Identifiers.</param>
        /// <param name="Languages">Languages.</param>
        /// <param name="Publisher">Publisher.</param>
        /// <param name="Relation">Relation.</param>
        /// <param name="Rights">Rights.</param>
        /// <param name="Source">Source.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="SubTitle">SubTitle.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Type">Type.</param>
        public DublinCore(Dictionary<string, string> AlternateTitle = default(Dictionary<string, string>), Dictionary<string, string> Contributor = default(Dictionary<string, string>), Dictionary<string, string> Coverage = default(Dictionary<string, string>), Dictionary<string, string> Creator = default(Dictionary<string, string>), DateTime? Date = default(DateTime?), Dictionary<string, string> Description = default(Dictionary<string, string>), Dictionary<string, string> Format = default(Dictionary<string, string>), List<InternationalIdentifier> Identifiers = default(List<InternationalIdentifier>), List<CodeValue> Languages = default(List<CodeValue>), Dictionary<string, string> Publisher = default(Dictionary<string, string>), Dictionary<string, string> Relation = default(Dictionary<string, string>), Dictionary<string, string> Rights = default(Dictionary<string, string>), Dictionary<string, string> Source = default(Dictionary<string, string>), Dictionary<string, string> Subject = default(Dictionary<string, string>), Dictionary<string, string> SubTitle = default(Dictionary<string, string>), Dictionary<string, string> Title = default(Dictionary<string, string>), Dictionary<string, string> Type = default(Dictionary<string, string>))
        {
            this.AlternateTitle = AlternateTitle;
            this.Contributor = Contributor;
            this.Coverage = Coverage;
            this.Creator = Creator;
            this.Date = Date;
            this.Description = Description;
            this.Format = Format;
            this.Identifiers = Identifiers;
            this.Languages = Languages;
            this.Publisher = Publisher;
            this.Relation = Relation;
            this.Rights = Rights;
            this.Source = Source;
            this.Subject = Subject;
            this.SubTitle = SubTitle;
            this.Title = Title;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets AlternateTitle
        /// </summary>
        [DataMember(Name="AlternateTitle", EmitDefaultValue=false)]
        public Dictionary<string, string> AlternateTitle { get; set; }
        /// <summary>
        /// Gets or Sets Contributor
        /// </summary>
        [DataMember(Name="Contributor", EmitDefaultValue=false)]
        public Dictionary<string, string> Contributor { get; set; }
        /// <summary>
        /// Gets or Sets Coverage
        /// </summary>
        [DataMember(Name="Coverage", EmitDefaultValue=false)]
        public Dictionary<string, string> Coverage { get; set; }
        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="Creator", EmitDefaultValue=false)]
        public Dictionary<string, string> Creator { get; set; }
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public Dictionary<string, string> Description { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="Format", EmitDefaultValue=false)]
        public Dictionary<string, string> Format { get; set; }
        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name="Identifiers", EmitDefaultValue=false)]
        public List<InternationalIdentifier> Identifiers { get; set; }
        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name="Languages", EmitDefaultValue=false)]
        public List<CodeValue> Languages { get; set; }
        /// <summary>
        /// Gets or Sets Publisher
        /// </summary>
        [DataMember(Name="Publisher", EmitDefaultValue=false)]
        public Dictionary<string, string> Publisher { get; set; }
        /// <summary>
        /// Gets or Sets Relation
        /// </summary>
        [DataMember(Name="Relation", EmitDefaultValue=false)]
        public Dictionary<string, string> Relation { get; set; }
        /// <summary>
        /// Gets or Sets Rights
        /// </summary>
        [DataMember(Name="Rights", EmitDefaultValue=false)]
        public Dictionary<string, string> Rights { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public Dictionary<string, string> Source { get; set; }
        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public Dictionary<string, string> Subject { get; set; }
        /// <summary>
        /// Gets or Sets SubTitle
        /// </summary>
        [DataMember(Name="SubTitle", EmitDefaultValue=false)]
        public Dictionary<string, string> SubTitle { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public Dictionary<string, string> Title { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public Dictionary<string, string> Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DublinCore {\n");
            sb.Append("  AlternateTitle: ").Append(AlternateTitle).Append("\n");
            sb.Append("  Contributor: ").Append(Contributor).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  Relation: ").Append(Relation).Append("\n");
            sb.Append("  Rights: ").Append(Rights).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubTitle: ").Append(SubTitle).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DublinCore);
        }

        /// <summary>
        /// Returns true if DublinCore instances are equal
        /// </summary>
        /// <param name="other">Instance of DublinCore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DublinCore other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AlternateTitle == other.AlternateTitle ||
                    this.AlternateTitle != null &&
                    this.AlternateTitle.SequenceEqual(other.AlternateTitle)
                ) && 
                (
                    this.Contributor == other.Contributor ||
                    this.Contributor != null &&
                    this.Contributor.SequenceEqual(other.Contributor)
                ) && 
                (
                    this.Coverage == other.Coverage ||
                    this.Coverage != null &&
                    this.Coverage.SequenceEqual(other.Coverage)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.SequenceEqual(other.Creator)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.SequenceEqual(other.Description)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.SequenceEqual(other.Format)
                ) && 
                (
                    this.Identifiers == other.Identifiers ||
                    this.Identifiers != null &&
                    this.Identifiers.SequenceEqual(other.Identifiers)
                ) && 
                (
                    this.Languages == other.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(other.Languages)
                ) && 
                (
                    this.Publisher == other.Publisher ||
                    this.Publisher != null &&
                    this.Publisher.SequenceEqual(other.Publisher)
                ) && 
                (
                    this.Relation == other.Relation ||
                    this.Relation != null &&
                    this.Relation.SequenceEqual(other.Relation)
                ) && 
                (
                    this.Rights == other.Rights ||
                    this.Rights != null &&
                    this.Rights.SequenceEqual(other.Rights)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.SequenceEqual(other.Source)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    this.SubTitle == other.SubTitle ||
                    this.SubTitle != null &&
                    this.SubTitle.SequenceEqual(other.SubTitle)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.SequenceEqual(other.Title)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.SequenceEqual(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AlternateTitle != null)
                    hash = hash * 59 + this.AlternateTitle.GetHashCode();
                if (this.Contributor != null)
                    hash = hash * 59 + this.Contributor.GetHashCode();
                if (this.Coverage != null)
                    hash = hash * 59 + this.Coverage.GetHashCode();
                if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Identifiers != null)
                    hash = hash * 59 + this.Identifiers.GetHashCode();
                if (this.Languages != null)
                    hash = hash * 59 + this.Languages.GetHashCode();
                if (this.Publisher != null)
                    hash = hash * 59 + this.Publisher.GetHashCode();
                if (this.Relation != null)
                    hash = hash * 59 + this.Relation.GetHashCode();
                if (this.Rights != null)
                    hash = hash * 59 + this.Rights.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.SubTitle != null)
                    hash = hash * 59 + this.SubTitle.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
