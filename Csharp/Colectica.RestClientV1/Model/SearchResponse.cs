/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// SearchResponse
    /// </summary>
    [DataContract]
    public partial class SearchResponse :  IEquatable<SearchResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponse" /> class.
        /// </summary>
        /// <param name="Results">Results.</param>
        /// <param name="TotalResults">TotalResults.</param>
        /// <param name="ReturnedResults">ReturnedResults.</param>
        /// <param name="DatabaseTime">DatabaseTime.</param>
        /// <param name="RepositoryTime">RepositoryTime.</param>
        public SearchResponse(List<SearchResult> Results = default(List<SearchResult>), long? TotalResults = default(long?), long? ReturnedResults = default(long?), string DatabaseTime = default(string), string RepositoryTime = default(string))
        {
            this.Results = Results;
            this.TotalResults = TotalResults;
            this.ReturnedResults = ReturnedResults;
            this.DatabaseTime = DatabaseTime;
            this.RepositoryTime = RepositoryTime;
        }
        
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="Results", EmitDefaultValue=false)]
        public List<SearchResult> Results { get; set; }
        /// <summary>
        /// Gets or Sets TotalResults
        /// </summary>
        [DataMember(Name="TotalResults", EmitDefaultValue=false)]
        public long? TotalResults { get; set; }
        /// <summary>
        /// Gets or Sets ReturnedResults
        /// </summary>
        [DataMember(Name="ReturnedResults", EmitDefaultValue=false)]
        public long? ReturnedResults { get; set; }
        /// <summary>
        /// Gets or Sets DatabaseTime
        /// </summary>
        [DataMember(Name="DatabaseTime", EmitDefaultValue=false)]
        public string DatabaseTime { get; set; }
        /// <summary>
        /// Gets or Sets RepositoryTime
        /// </summary>
        [DataMember(Name="RepositoryTime", EmitDefaultValue=false)]
        public string RepositoryTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResponse {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  TotalResults: ").Append(TotalResults).Append("\n");
            sb.Append("  ReturnedResults: ").Append(ReturnedResults).Append("\n");
            sb.Append("  DatabaseTime: ").Append(DatabaseTime).Append("\n");
            sb.Append("  RepositoryTime: ").Append(RepositoryTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SearchResponse);
        }

        /// <summary>
        /// Returns true if SearchResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Results == other.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(other.Results)
                ) && 
                (
                    this.TotalResults == other.TotalResults ||
                    this.TotalResults != null &&
                    this.TotalResults.Equals(other.TotalResults)
                ) && 
                (
                    this.ReturnedResults == other.ReturnedResults ||
                    this.ReturnedResults != null &&
                    this.ReturnedResults.Equals(other.ReturnedResults)
                ) && 
                (
                    this.DatabaseTime == other.DatabaseTime ||
                    this.DatabaseTime != null &&
                    this.DatabaseTime.Equals(other.DatabaseTime)
                ) && 
                (
                    this.RepositoryTime == other.RepositoryTime ||
                    this.RepositoryTime != null &&
                    this.RepositoryTime.Equals(other.RepositoryTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Results != null)
                    hash = hash * 59 + this.Results.GetHashCode();
                if (this.TotalResults != null)
                    hash = hash * 59 + this.TotalResults.GetHashCode();
                if (this.ReturnedResults != null)
                    hash = hash * 59 + this.ReturnedResults.GetHashCode();
                if (this.DatabaseTime != null)
                    hash = hash * 59 + this.DatabaseTime.GetHashCode();
                if (this.RepositoryTime != null)
                    hash = hash * 59 + this.RepositoryTime.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
