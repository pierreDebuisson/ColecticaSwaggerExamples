/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// SearchRequest
    /// </summary>
    [DataContract]
    public partial class SearchRequest :  IEquatable<SearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ResultOrdering
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultOrderingEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Alphabetical for "Alphabetical"
            /// </summary>
            [EnumMember(Value = "Alphabetical")]
            Alphabetical,
            
            /// <summary>
            /// Enum ItemType for "ItemType"
            /// </summary>
            [EnumMember(Value = "ItemType")]
            ItemType,
            
            /// <summary>
            /// Enum MetadataRank for "MetadataRank"
            /// </summary>
            [EnumMember(Value = "MetadataRank")]
            MetadataRank,
            
            /// <summary>
            /// Enum VersionDate for "VersionDate"
            /// </summary>
            [EnumMember(Value = "VersionDate")]
            VersionDate
        }


        /// <summary>
        /// Gets or Sets SearchTargets
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchTargetsEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Name for "Name"
            /// </summary>
            [EnumMember(Value = "Name")]
            Name,
            
            /// <summary>
            /// Enum Label for "Label"
            /// </summary>
            [EnumMember(Value = "Label")]
            Label,
            
            /// <summary>
            /// Enum Description for "Description"
            /// </summary>
            [EnumMember(Value = "Description")]
            Description,
            
            /// <summary>
            /// Enum SummaryText for "SummaryText"
            /// </summary>
            [EnumMember(Value = "SummaryText")]
            SummaryText,
            
            /// <summary>
            /// Enum Synonym for "Synonym"
            /// </summary>
            [EnumMember(Value = "Synonym")]
            Synonym,
            
            /// <summary>
            /// Enum Keywords for "Keywords"
            /// </summary>
            [EnumMember(Value = "Keywords")]
            Keywords,
            
            /// <summary>
            /// Enum VersionRationale for "VersionRationale"
            /// </summary>
            [EnumMember(Value = "VersionRationale")]
            VersionRationale,
            
            /// <summary>
            /// Enum Subjects for "Subjects"
            /// </summary>
            [EnumMember(Value = "Subjects")]
            Subjects,
            
            /// <summary>
            /// Enum AlternateTitle for "AlternateTitle"
            /// </summary>
            [EnumMember(Value = "AlternateTitle")]
            AlternateTitle,
            
            /// <summary>
            /// Enum SubTitle for "SubTitle"
            /// </summary>
            [EnumMember(Value = "SubTitle")]
            SubTitle
        }

        /// <summary>
        /// Gets or Sets ResultOrdering
        /// </summary>
        [DataMember(Name="ResultOrdering", EmitDefaultValue=false)]
        public ResultOrderingEnum? ResultOrdering { get; set; }
        /// <summary>
        /// Gets or Sets SearchTargets
        /// </summary>
        [DataMember(Name="SearchTargets", EmitDefaultValue=false)]
        public List<SearchTargetsEnum> SearchTargets { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequest" /> class.
        /// </summary>
        /// <param name="Cultures">Cultures.</param>
        /// <param name="ItemTypes">ItemTypes.</param>
        /// <param name="LanguageSortOrder">LanguageSortOrder.</param>
        /// <param name="MaxResults">MaxResults.</param>
        /// <param name="RankResults">RankResults.</param>
        /// <param name="ResultOffset">ResultOffset.</param>
        /// <param name="ResultOrdering">ResultOrdering.</param>
        /// <param name="SearchDepricatedItems">SearchDepricatedItems.</param>
        /// <param name="SearchLatestVersion">SearchLatestVersion.</param>
        /// <param name="SearchSetPredicate">SearchSetPredicate.</param>
        /// <param name="SearchSets">SearchSets.</param>
        /// <param name="SearchTargets">SearchTargets.</param>
        /// <param name="SearchTerms">SearchTerms.</param>
        /// <param name="UsePrefixSearch">UsePrefixSearch.</param>
        public SearchRequest(List<string> Cultures = default(List<string>), List<Guid?> ItemTypes = default(List<Guid?>), List<string> LanguageSortOrder = default(List<string>), int? MaxResults = default(int?), bool? RankResults = default(bool?), int? ResultOffset = default(int?), ResultOrderingEnum? ResultOrdering = default(ResultOrderingEnum?), bool? SearchDepricatedItems = default(bool?), bool? SearchLatestVersion = default(bool?), Guid? SearchSetPredicate = default(Guid?), List<IdentifierInRequest> SearchSets = default(List<IdentifierInRequest>), List<SearchTargetsEnum> SearchTargets = default(List<SearchTargetsEnum>), List<string> SearchTerms = default(List<string>), bool? UsePrefixSearch = default(bool?))
        {
            this.Cultures = Cultures;
            this.ItemTypes = ItemTypes;
            this.LanguageSortOrder = LanguageSortOrder;
            this.MaxResults = MaxResults;
            this.RankResults = RankResults;
            this.ResultOffset = ResultOffset;
            this.ResultOrdering = ResultOrdering;
            this.SearchDepricatedItems = SearchDepricatedItems;
            this.SearchLatestVersion = SearchLatestVersion;
            this.SearchSetPredicate = SearchSetPredicate;
            this.SearchSets = SearchSets;
            this.SearchTargets = SearchTargets;
            this.SearchTerms = SearchTerms;
            this.UsePrefixSearch = UsePrefixSearch;
        }
        
        /// <summary>
        /// Gets or Sets Cultures
        /// </summary>
        [DataMember(Name="Cultures", EmitDefaultValue=false)]
        public List<string> Cultures { get; set; }
        /// <summary>
        /// Gets or Sets ItemTypes
        /// </summary>
        [DataMember(Name="ItemTypes", EmitDefaultValue=false)]
        public List<Guid?> ItemTypes { get; set; }
        /// <summary>
        /// Gets or Sets LanguageSortOrder
        /// </summary>
        [DataMember(Name="LanguageSortOrder", EmitDefaultValue=false)]
        public List<string> LanguageSortOrder { get; set; }
        /// <summary>
        /// Gets or Sets MaxResults
        /// </summary>
        [DataMember(Name="MaxResults", EmitDefaultValue=false)]
        public int? MaxResults { get; set; }
        /// <summary>
        /// Gets or Sets RankResults
        /// </summary>
        [DataMember(Name="RankResults", EmitDefaultValue=false)]
        public bool? RankResults { get; set; }
        /// <summary>
        /// Gets or Sets ResultOffset
        /// </summary>
        [DataMember(Name="ResultOffset", EmitDefaultValue=false)]
        public int? ResultOffset { get; set; }
        /// <summary>
        /// Gets or Sets SearchDepricatedItems
        /// </summary>
        [DataMember(Name="SearchDepricatedItems", EmitDefaultValue=false)]
        public bool? SearchDepricatedItems { get; set; }
        /// <summary>
        /// Gets or Sets SearchLatestVersion
        /// </summary>
        [DataMember(Name="SearchLatestVersion", EmitDefaultValue=false)]
        public bool? SearchLatestVersion { get; set; }
        /// <summary>
        /// Gets or Sets SearchSetPredicate
        /// </summary>
        [DataMember(Name="SearchSetPredicate", EmitDefaultValue=false)]
        public Guid? SearchSetPredicate { get; set; }
        /// <summary>
        /// Gets or Sets SearchSets
        /// </summary>
        [DataMember(Name="SearchSets", EmitDefaultValue=false)]
        public List<IdentifierInRequest> SearchSets { get; set; }
        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [DataMember(Name="SearchTerms", EmitDefaultValue=false)]
        public List<string> SearchTerms { get; set; }
        /// <summary>
        /// Gets or Sets UsePrefixSearch
        /// </summary>
        [DataMember(Name="UsePrefixSearch", EmitDefaultValue=false)]
        public bool? UsePrefixSearch { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchRequest {\n");
            sb.Append("  Cultures: ").Append(Cultures).Append("\n");
            sb.Append("  ItemTypes: ").Append(ItemTypes).Append("\n");
            sb.Append("  LanguageSortOrder: ").Append(LanguageSortOrder).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  RankResults: ").Append(RankResults).Append("\n");
            sb.Append("  ResultOffset: ").Append(ResultOffset).Append("\n");
            sb.Append("  ResultOrdering: ").Append(ResultOrdering).Append("\n");
            sb.Append("  SearchDepricatedItems: ").Append(SearchDepricatedItems).Append("\n");
            sb.Append("  SearchLatestVersion: ").Append(SearchLatestVersion).Append("\n");
            sb.Append("  SearchSetPredicate: ").Append(SearchSetPredicate).Append("\n");
            sb.Append("  SearchSets: ").Append(SearchSets).Append("\n");
            sb.Append("  SearchTargets: ").Append(SearchTargets).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  UsePrefixSearch: ").Append(UsePrefixSearch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SearchRequest);
        }

        /// <summary>
        /// Returns true if SearchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Cultures == other.Cultures ||
                    this.Cultures != null &&
                    this.Cultures.SequenceEqual(other.Cultures)
                ) && 
                (
                    this.ItemTypes == other.ItemTypes ||
                    this.ItemTypes != null &&
                    this.ItemTypes.SequenceEqual(other.ItemTypes)
                ) && 
                (
                    this.LanguageSortOrder == other.LanguageSortOrder ||
                    this.LanguageSortOrder != null &&
                    this.LanguageSortOrder.SequenceEqual(other.LanguageSortOrder)
                ) && 
                (
                    this.MaxResults == other.MaxResults ||
                    this.MaxResults != null &&
                    this.MaxResults.Equals(other.MaxResults)
                ) && 
                (
                    this.RankResults == other.RankResults ||
                    this.RankResults != null &&
                    this.RankResults.Equals(other.RankResults)
                ) && 
                (
                    this.ResultOffset == other.ResultOffset ||
                    this.ResultOffset != null &&
                    this.ResultOffset.Equals(other.ResultOffset)
                ) && 
                (
                    this.ResultOrdering == other.ResultOrdering ||
                    this.ResultOrdering != null &&
                    this.ResultOrdering.Equals(other.ResultOrdering)
                ) && 
                (
                    this.SearchDepricatedItems == other.SearchDepricatedItems ||
                    this.SearchDepricatedItems != null &&
                    this.SearchDepricatedItems.Equals(other.SearchDepricatedItems)
                ) && 
                (
                    this.SearchLatestVersion == other.SearchLatestVersion ||
                    this.SearchLatestVersion != null &&
                    this.SearchLatestVersion.Equals(other.SearchLatestVersion)
                ) && 
                (
                    this.SearchSetPredicate == other.SearchSetPredicate ||
                    this.SearchSetPredicate != null &&
                    this.SearchSetPredicate.Equals(other.SearchSetPredicate)
                ) && 
                (
                    this.SearchSets == other.SearchSets ||
                    this.SearchSets != null &&
                    this.SearchSets.SequenceEqual(other.SearchSets)
                ) && 
                (
                    this.SearchTargets == other.SearchTargets ||
                    this.SearchTargets != null &&
                    this.SearchTargets.SequenceEqual(other.SearchTargets)
                ) && 
                (
                    this.SearchTerms == other.SearchTerms ||
                    this.SearchTerms != null &&
                    this.SearchTerms.SequenceEqual(other.SearchTerms)
                ) && 
                (
                    this.UsePrefixSearch == other.UsePrefixSearch ||
                    this.UsePrefixSearch != null &&
                    this.UsePrefixSearch.Equals(other.UsePrefixSearch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Cultures != null)
                    hash = hash * 59 + this.Cultures.GetHashCode();
                if (this.ItemTypes != null)
                    hash = hash * 59 + this.ItemTypes.GetHashCode();
                if (this.LanguageSortOrder != null)
                    hash = hash * 59 + this.LanguageSortOrder.GetHashCode();
                if (this.MaxResults != null)
                    hash = hash * 59 + this.MaxResults.GetHashCode();
                if (this.RankResults != null)
                    hash = hash * 59 + this.RankResults.GetHashCode();
                if (this.ResultOffset != null)
                    hash = hash * 59 + this.ResultOffset.GetHashCode();
                if (this.ResultOrdering != null)
                    hash = hash * 59 + this.ResultOrdering.GetHashCode();
                if (this.SearchDepricatedItems != null)
                    hash = hash * 59 + this.SearchDepricatedItems.GetHashCode();
                if (this.SearchLatestVersion != null)
                    hash = hash * 59 + this.SearchLatestVersion.GetHashCode();
                if (this.SearchSetPredicate != null)
                    hash = hash * 59 + this.SearchSetPredicate.GetHashCode();
                if (this.SearchSets != null)
                    hash = hash * 59 + this.SearchSets.GetHashCode();
                if (this.SearchTargets != null)
                    hash = hash * 59 + this.SearchTargets.GetHashCode();
                if (this.SearchTerms != null)
                    hash = hash * 59 + this.SearchTerms.GetHashCode();
                if (this.UsePrefixSearch != null)
                    hash = hash * 59 + this.UsePrefixSearch.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
