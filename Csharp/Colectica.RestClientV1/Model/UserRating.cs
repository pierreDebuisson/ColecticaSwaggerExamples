/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// UserRating
    /// </summary>
    [DataContract]
    public partial class UserRating :  IEquatable<UserRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRating" /> class.
        /// </summary>
        /// <param name="Rating">Rating.</param>
        /// <param name="Username">Username.</param>
        /// <param name="Identifier">Identifier.</param>
        /// <param name="Version">Version.</param>
        /// <param name="AgencyId">AgencyId.</param>
        public UserRating(int? Rating = default(int?), string Username = default(string), Guid? Identifier = default(Guid?), long? Version = default(long?), string AgencyId = default(string))
        {
            this.Rating = Rating;
            this.Username = Username;
            this.Identifier = Identifier;
            this.Version = Version;
            this.AgencyId = AgencyId;
        }
        
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="Rating", EmitDefaultValue=false)]
        public int? Rating { get; set; }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Guid? Identifier { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public long? Version { get; set; }
        /// <summary>
        /// Gets or Sets AgencyId
        /// </summary>
        [DataMember(Name="AgencyId", EmitDefaultValue=false)]
        public string AgencyId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRating {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserRating);
        }

        /// <summary>
        /// Returns true if UserRating instances are equal
        /// </summary>
        /// <param name="other">Instance of UserRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRating other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Rating == other.Rating ||
                    this.Rating != null &&
                    this.Rating.Equals(other.Rating)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Identifier == other.Identifier ||
                    this.Identifier != null &&
                    this.Identifier.Equals(other.Identifier)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.AgencyId == other.AgencyId ||
                    this.AgencyId != null &&
                    this.AgencyId.Equals(other.AgencyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Rating != null)
                    hash = hash * 59 + this.Rating.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Identifier != null)
                    hash = hash * 59 + this.Identifier.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.AgencyId != null)
                    hash = hash * 59 + this.AgencyId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
