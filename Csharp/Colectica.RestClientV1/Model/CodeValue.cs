/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// CodeValue
    /// </summary>
    [DataContract]
    public partial class CodeValue :  IEquatable<CodeValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeValue" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        /// <param name="CodeListId">CodeListId.</param>
        /// <param name="CodeListName">CodeListName.</param>
        /// <param name="CodeListAgency">CodeListAgency.</param>
        /// <param name="CodeListVersion">CodeListVersion.</param>
        /// <param name="OtherValue">OtherValue.</param>
        /// <param name="CodeListUrn">CodeListUrn.</param>
        public CodeValue(string Value = default(string), string CodeListId = default(string), string CodeListName = default(string), string CodeListAgency = default(string), string CodeListVersion = default(string), string OtherValue = default(string), string CodeListUrn = default(string))
        {
            this.Value = Value;
            this.CodeListId = CodeListId;
            this.CodeListName = CodeListName;
            this.CodeListAgency = CodeListAgency;
            this.CodeListVersion = CodeListVersion;
            this.OtherValue = OtherValue;
            this.CodeListUrn = CodeListUrn;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Gets or Sets CodeListId
        /// </summary>
        [DataMember(Name="CodeListId", EmitDefaultValue=false)]
        public string CodeListId { get; set; }
        /// <summary>
        /// Gets or Sets CodeListName
        /// </summary>
        [DataMember(Name="CodeListName", EmitDefaultValue=false)]
        public string CodeListName { get; set; }
        /// <summary>
        /// Gets or Sets CodeListAgency
        /// </summary>
        [DataMember(Name="CodeListAgency", EmitDefaultValue=false)]
        public string CodeListAgency { get; set; }
        /// <summary>
        /// Gets or Sets CodeListVersion
        /// </summary>
        [DataMember(Name="CodeListVersion", EmitDefaultValue=false)]
        public string CodeListVersion { get; set; }
        /// <summary>
        /// Gets or Sets OtherValue
        /// </summary>
        [DataMember(Name="OtherValue", EmitDefaultValue=false)]
        public string OtherValue { get; set; }
        /// <summary>
        /// Gets or Sets CodeListUrn
        /// </summary>
        [DataMember(Name="CodeListUrn", EmitDefaultValue=false)]
        public string CodeListUrn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodeValue {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CodeListId: ").Append(CodeListId).Append("\n");
            sb.Append("  CodeListName: ").Append(CodeListName).Append("\n");
            sb.Append("  CodeListAgency: ").Append(CodeListAgency).Append("\n");
            sb.Append("  CodeListVersion: ").Append(CodeListVersion).Append("\n");
            sb.Append("  OtherValue: ").Append(OtherValue).Append("\n");
            sb.Append("  CodeListUrn: ").Append(CodeListUrn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CodeValue);
        }

        /// <summary>
        /// Returns true if CodeValue instances are equal
        /// </summary>
        /// <param name="other">Instance of CodeValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeValue other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.CodeListId == other.CodeListId ||
                    this.CodeListId != null &&
                    this.CodeListId.Equals(other.CodeListId)
                ) && 
                (
                    this.CodeListName == other.CodeListName ||
                    this.CodeListName != null &&
                    this.CodeListName.Equals(other.CodeListName)
                ) && 
                (
                    this.CodeListAgency == other.CodeListAgency ||
                    this.CodeListAgency != null &&
                    this.CodeListAgency.Equals(other.CodeListAgency)
                ) && 
                (
                    this.CodeListVersion == other.CodeListVersion ||
                    this.CodeListVersion != null &&
                    this.CodeListVersion.Equals(other.CodeListVersion)
                ) && 
                (
                    this.OtherValue == other.OtherValue ||
                    this.OtherValue != null &&
                    this.OtherValue.Equals(other.OtherValue)
                ) && 
                (
                    this.CodeListUrn == other.CodeListUrn ||
                    this.CodeListUrn != null &&
                    this.CodeListUrn.Equals(other.CodeListUrn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.CodeListId != null)
                    hash = hash * 59 + this.CodeListId.GetHashCode();
                if (this.CodeListName != null)
                    hash = hash * 59 + this.CodeListName.GetHashCode();
                if (this.CodeListAgency != null)
                    hash = hash * 59 + this.CodeListAgency.GetHashCode();
                if (this.CodeListVersion != null)
                    hash = hash * 59 + this.CodeListVersion.GetHashCode();
                if (this.OtherValue != null)
                    hash = hash * 59 + this.OtherValue.GetHashCode();
                if (this.CodeListUrn != null)
                    hash = hash * 59 + this.CodeListUrn.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
