/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// ItemPermission
    /// </summary>
    [DataContract]
    public partial class ItemPermission :  IEquatable<ItemPermission>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionEnum
        {
            
            /// <summary>
            /// Enum DeniedRead for "DeniedRead"
            /// </summary>
            [EnumMember(Value = "DeniedRead")]
            DeniedRead,
            
            /// <summary>
            /// Enum DeniedWrite for "DeniedWrite"
            /// </summary>
            [EnumMember(Value = "DeniedWrite")]
            DeniedWrite,
            
            /// <summary>
            /// Enum Denied for "Denied"
            /// </summary>
            [EnumMember(Value = "Denied")]
            Denied,
            
            /// <summary>
            /// Enum ExclusiveRead for "ExclusiveRead"
            /// </summary>
            [EnumMember(Value = "ExclusiveRead")]
            ExclusiveRead,
            
            /// <summary>
            /// Enum ExclusiveWrite for "ExclusiveWrite"
            /// </summary>
            [EnumMember(Value = "ExclusiveWrite")]
            ExclusiveWrite,
            
            /// <summary>
            /// Enum Exclusive for "Exclusive"
            /// </summary>
            [EnumMember(Value = "Exclusive")]
            Exclusive
        }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name="Permission", EmitDefaultValue=false)]
        public PermissionEnum? Permission { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemPermission" /> class.
        /// </summary>
        /// <param name="PermissionId">PermissionId.</param>
        /// <param name="RoleName">RoleName.</param>
        /// <param name="Permission">Permission.</param>
        /// <param name="Identifier">Identifier.</param>
        /// <param name="AgencyId">AgencyId.</param>
        /// <param name="Version">Version.</param>
        public ItemPermission(long? PermissionId = default(long?), string RoleName = default(string), PermissionEnum? Permission = default(PermissionEnum?), Guid? Identifier = default(Guid?), string AgencyId = default(string), long? Version = default(long?))
        {
            this.PermissionId = PermissionId;
            this.RoleName = RoleName;
            this.Permission = Permission;
            this.Identifier = Identifier;
            this.AgencyId = AgencyId;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets PermissionId
        /// </summary>
        [DataMember(Name="PermissionId", EmitDefaultValue=false)]
        public long? PermissionId { get; set; }
        /// <summary>
        /// Gets or Sets RoleName
        /// </summary>
        [DataMember(Name="RoleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }
        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Guid? Identifier { get; set; }
        /// <summary>
        /// Gets or Sets AgencyId
        /// </summary>
        [DataMember(Name="AgencyId", EmitDefaultValue=false)]
        public string AgencyId { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public long? Version { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemPermission {\n");
            sb.Append("  PermissionId: ").Append(PermissionId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemPermission);
        }

        /// <summary>
        /// Returns true if ItemPermission instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemPermission other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PermissionId == other.PermissionId ||
                    this.PermissionId != null &&
                    this.PermissionId.Equals(other.PermissionId)
                ) && 
                (
                    this.RoleName == other.RoleName ||
                    this.RoleName != null &&
                    this.RoleName.Equals(other.RoleName)
                ) && 
                (
                    this.Permission == other.Permission ||
                    this.Permission != null &&
                    this.Permission.Equals(other.Permission)
                ) && 
                (
                    this.Identifier == other.Identifier ||
                    this.Identifier != null &&
                    this.Identifier.Equals(other.Identifier)
                ) && 
                (
                    this.AgencyId == other.AgencyId ||
                    this.AgencyId != null &&
                    this.AgencyId.Equals(other.AgencyId)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PermissionId != null)
                    hash = hash * 59 + this.PermissionId.GetHashCode();
                if (this.RoleName != null)
                    hash = hash * 59 + this.RoleName.GetHashCode();
                if (this.Permission != null)
                    hash = hash * 59 + this.Permission.GetHashCode();
                if (this.Identifier != null)
                    hash = hash * 59 + this.Identifier.GetHashCode();
                if (this.AgencyId != null)
                    hash = hash * 59 + this.AgencyId.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
