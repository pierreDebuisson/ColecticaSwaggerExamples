/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// Note
    /// </summary>
    [DataContract]
    public partial class Note :  IEquatable<Note>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Item2
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Item2Enum
        {
            
            /// <summary>
            /// Enum Processing for "Processing"
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing,
            
            /// <summary>
            /// Enum Footnote for "Footnote"
            /// </summary>
            [EnumMember(Value = "Footnote")]
            Footnote,
            
            /// <summary>
            /// Enum Addendum for "Addendum"
            /// </summary>
            [EnumMember(Value = "Addendum")]
            Addendum,
            
            /// <summary>
            /// Enum System for "System"
            /// </summary>
            [EnumMember(Value = "System")]
            System,
            
            /// <summary>
            /// Enum Problem for "Problem"
            /// </summary>
            [EnumMember(Value = "Problem")]
            Problem,
            
            /// <summary>
            /// Enum Comment for "Comment"
            /// </summary>
            [EnumMember(Value = "Comment")]
            Comment,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other
        }

        /// <summary>
        /// Gets or Sets Item2
        /// </summary>
        [DataMember(Name="Item2", EmitDefaultValue=false)]
        public Item2Enum? Item2 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Note" /> class.
        /// </summary>
        /// <param name="Item1">Item1.</param>
        public Note(IdentifierTriple Item1 = default(IdentifierTriple))
        {
            this.Item1 = Item1;
        }
        
        /// <summary>
        /// Gets or Sets Item1
        /// </summary>
        [DataMember(Name="Item1", EmitDefaultValue=false)]
        public IdentifierTriple Item1 { get; set; }
        /// <summary>
        /// Gets or Sets Item3
        /// </summary>
        [DataMember(Name="Item3", EmitDefaultValue=false)]
        public string Item3 { get; private set; }
        /// <summary>
        /// Gets or Sets Item4
        /// </summary>
        [DataMember(Name="Item4", EmitDefaultValue=false)]
        public string Item4 { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Note {\n");
            sb.Append("  Item1: ").Append(Item1).Append("\n");
            sb.Append("  Item2: ").Append(Item2).Append("\n");
            sb.Append("  Item3: ").Append(Item3).Append("\n");
            sb.Append("  Item4: ").Append(Item4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Note);
        }

        /// <summary>
        /// Returns true if Note instances are equal
        /// </summary>
        /// <param name="other">Instance of Note to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Note other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Item1 == other.Item1 ||
                    this.Item1 != null &&
                    this.Item1.Equals(other.Item1)
                ) && 
                (
                    this.Item2 == other.Item2 ||
                    this.Item2 != null &&
                    this.Item2.Equals(other.Item2)
                ) && 
                (
                    this.Item3 == other.Item3 ||
                    this.Item3 != null &&
                    this.Item3.Equals(other.Item3)
                ) && 
                (
                    this.Item4 == other.Item4 ||
                    this.Item4 != null &&
                    this.Item4.Equals(other.Item4)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Item1 != null)
                    hash = hash * 59 + this.Item1.GetHashCode();
                if (this.Item2 != null)
                    hash = hash * 59 + this.Item2.GetHashCode();
                if (this.Item3 != null)
                    hash = hash * 59 + this.Item3.GetHashCode();
                if (this.Item4 != null)
                    hash = hash * 59 + this.Item4.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
