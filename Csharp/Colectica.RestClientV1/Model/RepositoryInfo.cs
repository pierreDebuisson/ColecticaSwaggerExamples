/* 
 * Colectica Repository REST API
 *
 * Colectica Repository REST API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Colectica.RestClientV1.Model
{
    /// <summary>
    /// RepositoryInfo
    /// </summary>
    [DataContract]
    public partial class RepositoryInfo :  IEquatable<RepositoryInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryInfo" /> class.
        /// </summary>
        /// <param name="Citation">Citation.</param>
        /// <param name="Repositories">Repositories.</param>
        /// <param name="CanRead">CanRead.</param>
        /// <param name="CanAdministrator">CanAdministrator.</param>
        /// <param name="CanWrite">CanWrite.</param>
        public RepositoryInfo(DublinCore Citation = default(DublinCore), Dictionary<string, string> Repositories = default(Dictionary<string, string>), bool? CanRead = default(bool?), bool? CanAdministrator = default(bool?), bool? CanWrite = default(bool?))
        {
            this.Citation = Citation;
            this.Repositories = Repositories;
            this.CanRead = CanRead;
            this.CanAdministrator = CanAdministrator;
            this.CanWrite = CanWrite;
        }
        
        /// <summary>
        /// Gets or Sets Citation
        /// </summary>
        [DataMember(Name="Citation", EmitDefaultValue=false)]
        public DublinCore Citation { get; set; }
        /// <summary>
        /// Gets or Sets Repositories
        /// </summary>
        [DataMember(Name="Repositories", EmitDefaultValue=false)]
        public Dictionary<string, string> Repositories { get; set; }
        /// <summary>
        /// Gets or Sets CanRead
        /// </summary>
        [DataMember(Name="CanRead", EmitDefaultValue=false)]
        public bool? CanRead { get; set; }
        /// <summary>
        /// Gets or Sets CanAdministrator
        /// </summary>
        [DataMember(Name="CanAdministrator", EmitDefaultValue=false)]
        public bool? CanAdministrator { get; set; }
        /// <summary>
        /// Gets or Sets CanWrite
        /// </summary>
        [DataMember(Name="CanWrite", EmitDefaultValue=false)]
        public bool? CanWrite { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepositoryInfo {\n");
            sb.Append("  Citation: ").Append(Citation).Append("\n");
            sb.Append("  Repositories: ").Append(Repositories).Append("\n");
            sb.Append("  CanRead: ").Append(CanRead).Append("\n");
            sb.Append("  CanAdministrator: ").Append(CanAdministrator).Append("\n");
            sb.Append("  CanWrite: ").Append(CanWrite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RepositoryInfo);
        }

        /// <summary>
        /// Returns true if RepositoryInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of RepositoryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepositoryInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Citation == other.Citation ||
                    this.Citation != null &&
                    this.Citation.Equals(other.Citation)
                ) && 
                (
                    this.Repositories == other.Repositories ||
                    this.Repositories != null &&
                    this.Repositories.SequenceEqual(other.Repositories)
                ) && 
                (
                    this.CanRead == other.CanRead ||
                    this.CanRead != null &&
                    this.CanRead.Equals(other.CanRead)
                ) && 
                (
                    this.CanAdministrator == other.CanAdministrator ||
                    this.CanAdministrator != null &&
                    this.CanAdministrator.Equals(other.CanAdministrator)
                ) && 
                (
                    this.CanWrite == other.CanWrite ||
                    this.CanWrite != null &&
                    this.CanWrite.Equals(other.CanWrite)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Citation != null)
                    hash = hash * 59 + this.Citation.GetHashCode();
                if (this.Repositories != null)
                    hash = hash * 59 + this.Repositories.GetHashCode();
                if (this.CanRead != null)
                    hash = hash * 59 + this.CanRead.GetHashCode();
                if (this.CanAdministrator != null)
                    hash = hash * 59 + this.CanAdministrator.GetHashCode();
                if (this.CanWrite != null)
                    hash = hash * 59 + this.CanWrite.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
